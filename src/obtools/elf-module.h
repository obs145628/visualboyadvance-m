//===-- text_elf_parser/text_elf_module.hh - TextElfModule ------*- C++ -*-===//
//
// gba-emu
// Author: Steven Lariau
//
//===----------------------------------------------------------------------===//
///
/// \file
/// Define classes usefull to handle text-elf representation
/// This is the output of objdump, parsed to extract symbols and addreses
///
//===----------------------------------------------------------------------===//

#pragma once

#include <cstdint>
#include <string>
#include <vector>

namespace obs {

struct TextElfIns {

  enum class Type {
    ARM,
    THUMB,
    MIXED,
    UNKNOWN,
  };

  std::uint64_t opcode; // 4-bit Thumb or 8-bit ARM opcode
  int addr;             // Absolute address
  std::string
      text; // Text representation of the instruction (with optional comments)
  Type type;

  void dump() const;
};

struct TextElfFunction {

  std::string symbol; // symbol name for function
  int beg_addr;       // Must be the same than the first instruction address
  int end_addr;       // address right after last instruction
  std::vector<TextElfIns> code;
  TextElfIns::Type type;

  // compute many infos about functions (end_addr, type, etc)
  // must be called after all instructions are added
  void init();

  // print addr and name
  void dump_header_short() const;

  // print many summary infos
  void dump_header_long() const;
};

struct TextElfModule {
  std::vector<TextElfFunction> funs;

  void dump_code() const;
  void dump_defs() const;

  // Called after all functions are added
  void init();
};

// Load a module from an Elf file path
// The file is an elf file generated by devkitarm compilers
TextElfModule load_text_elf_module(const std::string &elf_path);

} // namespace obs
